name: Deploy Backend on Push to Main

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # 3. Install project dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Inject secrets into .env
      - name: Create .env file from GitHub Secrets
        run: |
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          echo "SESSION_SECRET_KEY=${{ secrets.SESSION_SECRET_KEY }}" >> .env
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "MAIL_FROM=${{ secrets.MAIL_FROM }}" >> .env
          echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env
          echo "IS_DEV=${{ secrets.IS_DEV }}" >> .env
          echo "SECURE_LOGIN=${{ secrets.SECURE_LOGIN }}" >> .env

      # 5. Run unit tests
      - name: Run backend tests
        run: |
          echo "Running tests..."
          python -m unittest discover -s tests

      # 6. Setup SSH Agent with private key
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 7. SSH into GCP VM and deploy app
      - name: Deploy on GCP VM via SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd ~/Codeblood-Backend
            echo "Pulling latest code..."
            git pull origin main
            echo "Rebuilding docker container..."
            docker compose up --build -d
          EOF

      # 8. Health check to confirm deployment
      - name: Check if backend is live
        run: |
          echo "Pinging backend at https://api-obscura.ccstiet.com/test"
          curl --fail --retry 5 --retry-delay 3 https://api-obscura.ccstiet.com/test
